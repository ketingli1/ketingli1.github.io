笔记是很重要的！！

##设计模式的六大原则

- 开闭原则 (Open Close Principle)

  对扩展开发，对修改关闭，经验是我们需要使用接口和抽象类。

- 里氏替换原则 (Liskov Substitution Principle)

  任何基类可以出现的地方，子类一定可以出现。里氏替换原则是对开闭原则的补充，实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象华的具体实现，所以里氏替换原则是对实现抽象化的具体步骤规范。

- 依赖倒置原则 (Dependence Inversion Principle)

  面对接口编程，依赖于抽象而不依赖于具体，是开闭原则的基础。

- 接口隔离原则 (Interface Segregation Principle)

  使用多个隔离的接口，比使用单个接口要好，降低类之间的耦合度。

- 迪米特法则(最少知道原则) (Demetere Principle)

  一个实体应当尽量少的与其他实体间发生相互作用，是的系统功能模块相对独立。

- 合成复用原则 (Composite Reuse Principle)

  尽量使用合成/聚合的方式，而不是使用继承。

  总结：开闭原则是最基础的一个原则，后5个原则都是开闭原则的具体形态，也就是说后5个原则就是指导设计的工具和方法，而开闭原则才是精神领袖。

##设计模式分类

设计模式分为三种类型，共23种。
* 创建型模式


  单例模式、抽象工厂模式、建造者模式、工厂方法模式、原型模式

* 结构型模式

  适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式

* 行为型模式

  模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式（责任链模式）、访问者模式

##23种设计模式简单介绍

* 单例模式

  Singleton：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

* 抽象工厂模式

  Abstract Factory: 提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。

* 建造者模式

  Builder: 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

* 工厂方法模式

  Factory Method: 定义一个用于创建对象的接口，让子类决定将哪一个类实例化。

* 原型模式

  Prototype: 用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。

  ---

* 适配器模式

  Adapter : 将一个类的接口转换成客户希望的另外一个接口，是的原本由于接口不兼容而不能一起工作的那些类可以一起工作。

* 桥接模式

  Bridge: 将抽象部分与它的实现部分分离，使它们都可以独立的变化。

* 装饰模式

  Decorator: 动态给一个对象添加一些额外的职责。就功能扩展而言，它比生成之类方式更为灵活。

* 组合模式

  Composite: 将对象组合成树形结构，以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。

* 外观模式

  Facade: 动态地给一个对象添加一些额外的职责，就拓展功能而言，它比生成子类方式更为灵活。

* 享元模式

  Flyweight: 运用共享技术有效地支持大量细粒度的对象。

* 代理模式

  Proxy: 为其他对象提供一个代理已控制这个对象的访问。

  ***

* 模板方法模式

  Template Method: 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。

* 命令模式

  Command: 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。

* 迭代器模式

  Iterator: 提供一个方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。

* 观察者模式

  Observer：定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。

* 中介者模式

  Mediator：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。

* 备忘录模式

  Memento: 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。

* 解释器模式

  Interpreter：给定一个语言，定义它的文法的一中标识，并定义一个解释器，该解释器使用该表示来解释语言中的句子。

* 状态模式

  State：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。

* 策略模式

  Strategy: 定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。

* 职责链模式

  Chain of Responsibility: 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。

* 访问者模式

  Visitor: 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。